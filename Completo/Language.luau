-- Everything here are using ChatGPT and Gemini to write description, because I am lazy

return {

	Directives = {
		['optimize 2']	= 'Enables aggressive optimizations for maximum performance, often at the cost of debugging clarity.',
		['optimize 1']	= 'Enables basic optimizations that are safe and do not significantly affect debug readability.',
		['optimize 0']	= 'Disables all compiler optimizations. The script runs exactly as written, with minimal transformation.',
		['nonstrict'] 	= 'Disable strict type checking in this script.',
		['nocheck']		= 'Disable static analysis and type checking completely.',
		['nolint ']		= 'Disable linting (warnings/errors) for this script.',
		['strict']		= 'Enable strict type checking (types must be declared and respected).',
		['native']		= 'Enable native code generation',
	};

	Attributes = {
		['deprecated']	= 'To indicate that a function should be marked as deprecated by the analyzer',
		['checked']		= 'To indicate that a function should be type-checked, even if type checking is not enabled globally.',
		['native']		= 'To indicate that a function should be compiled using native codegen',
	};
	
	Linting = {
		['UnbalancedAssignment']  	= 'Number of values in assignment does not match number of variables.',
		['ComparisonPrecedence']  	= 'Comparison chaining (a < b < c) might not work as expected.',
		['MultiLineStatement']    	= 'Multiline statements may need better formatting or parentheses.',
		['UninitializedLocal']    	= 'Local variable might be used before being initialized.',
		['DuplicateCondition']    	= 'Condition is repeated and may indicate a logic error.',
		['BuiltinGlobalWrite']    	= 'Writing to built-in globals like `math`, `table`, etc.',
		['DuplicateFunction']     	= 'Function is declared multiple times with the same name.',
		['SameLineStatement']     	= 'Multiple statements on the same line without a separator.',
		['GlobalUsedAsLocal']     	= 'Global variable is used as if it were declared locally.',
		['DeprecatedGlobal']      	= 'Using outdated or deprecated global functions/variables.',
		['CommentDirective']      	= 'Incorrect or malformed comment directive (e.g., `--!`) found.',
		['PlaceholderRead']       	= 'Using `_` (placeholder) variable where a real value is expected.',
		['UnreachableCode']       	= 'Code that will never run (e.g., after return or break).',
		['TableOperations']       	= 'Unsafe or problematic table operations.',
		['MisleadingAndOr']       	= 'Use of `and/or` expressions that may not behave intuitively.',
		['ImplicitReturn']        	= 'Function is missing an explicit return statement.',
		['DuplicateLocal']        	= 'Local variable declared multiple times in same scope.',
		['FunctionUnused']        	= 'Function is defined but never called.',
		['IntegerParsing']        	= 'String used as number but fails to convert correctly.',
		['DeprecatedApi']         	= 'Using an API that is obsolete or discouraged.',
		['UnknownGlobal']         	= 'Using a global variable that is not declared.',
		['ImportUnused']          	= 'Module/script is required but not used.',
		['FormatString']         	= 'Invalid or mismatched format string arguments.',
		['TableLiteral']          	= 'Unusual or suspicious table construction.',
		['UnknownType']           	= 'Using a type that does not exist or is misspelled.',
		['LocalShadow']           	= 'Local variable shadows another variable with the same name.',
		['LocalUnused']           	= 'Local variable is declared but not used.',
		['ForRange']              	= 'Issues in numeric for-loops, like unreachable code or constant limits.',
	};
	
	Services = {
		['AdService'] 							= 'Manages advertising campaigns and ad sets within Roblox experiences.',
		['AnalyticsService'] 					= 'Provides methods for logging various progression and custom events within an experience for analytics purposes.',
		['AnimationClipProvider'] 				= 'Manages the registration and retrieval of AnimationClips, primarily for localized testing of animations in Studio.',
		['AssetService'] 						= 'Handles the loading and management of assets (models, images, audio, etc.) within Roblox, including their IDs and permissions.',
		['AnimationFromVideoCreatorService'] 	= 'Likely an internal service related to creating animations from video input.',
		['AvatarCreationService'] 				= 'Provides functionality for automatically setting up custom models as avatar assets and loading generated avatars.',
		['AvatarEditorService'] 				= 'Provides methods for accessing and managing a user\'s inventory of avatar items.',
		['AvatarImportService'] 				= 'Manages the import and sale of avatar items (accessories, clothing) within experiences.',
		['AssetDeliveryProxy'] 					= 'Likely an internal service related to the delivery of assets.',
		['BadgeService'] 						= 'Allows developers to create, award, and check the ownership of badges within their experiences.',
		['BrowserService'] 						= 'Likely an internal service related to browser functionalities within Roblox clients.',
		['ChangeHistoryService'] 				= 'Manages the undo/redo history in Roblox Studio, allowing plugins to record and commit changes.',
		['Chat'] 								= 'Provides HTTP APIs for working with chat functionalities, such as getting unread messages and marking messages as read.',
		['CollectionService'] 					= 'Allows developers to tag instances with arbitrary string tags, enabling easy grouping and retrieval of related objects.',
		['CommerceService'] 					= 'Likely an internal service related to in-experience commerce and transactions.',
		['ContentProvider'] 					= 'Manages the loading of content (assets) into the Roblox client, often used for preloading.',
		['ContextActionService'] 				= 'Binds user input (keyboard, gamepad, touch) to specific actions, providing context-sensitive controls.',
		['CookiesService'] 						= 'Likely an internal service for managing cookies or client-side persistent data.',
		['CoreScriptDebuggingManagerHelper'] 	= 'Likely an internal helper service for debugging core scripts.',
		['CoreGui'] 							= 'Represents the core GUI elements displayed by Roblox (e.g., chat, player list, backpack). Developers can control their visibility via StarterGui.',
		['DataStoreService'] 					= 'Enables developers to store and retrieve persistent data for experiences, such as player inventories or game progress.',
		['Debris'] 								= 'Provides a mechanism to automatically destroy instances after a specified lifetime, helping with memory management.',
		['DebuggerManager'] 					= 'Provides an interface for managing and interacting with the Roblox Studio debugger.',
		['DraftsService'] 						= 'Likely an internal service related to managing draft changes in Studio.',
		['DraggerService'] 						= 'Likely an internal service related to the dragging and manipulation of objects in Studio.',
		['FeatureRestrictionManager'] 			= 'Likely an internal service for managing feature restrictions.',
		['FlagStandService'] 					= 'Likely an internal service, possibly related to game flags or objectives.',
		['FriendService'] 						= 'Likely provides functionality related to a player\'s friends list and friend interactions.',
		['GamepadService'] 						= 'Handles input from gamepads, allowing developers to detect connected gamepads and process button presses/axis movements.',
		['GamePassService'] 					= 'Manages Game Passes, which are one-time purchases that grant special privileges within an experience.',
		['GeometryService'] 					= 'Provides methods for performing complex geometric operations on parts, such as subtracting or unioning shapes.',
		['Geometry'] 							= 'Refers to the shape and physical properties of parts within the Roblox environment (e.g., Ball, Block, Cylinder).',
		['GenerationService'] 					= 'Enables the programmatic generation of 3D meshes from text prompts, often for AI-driven content creation.',
		['GuiService'] 							= 'Manages global GUI properties and interactions, including gamepad navigation and selection of GUI objects.',
		['GuidRegistryService'] 				= 'Likely an internal service for managing globally unique identifiers (GUIDs).',
		['GroupService'] 						= 'Provides functionalities for interacting with Roblox groups, including roles, permissions, and group revenue.',
		['HapticService'] 						= 'Controls haptic feedback (vibration) on supported devices, typically gamepads.',
		['HeightmapImporterService'] 			= 'Likely an internal service for importing heightmap data, possibly for terrain generation.',
		['HSRDataContentProvider'] 				= 'Likely an internal content provider for specific data.',
		['HttpRbxApiService'] 					= 'An internal service for Roblox admins to send HTTP requests to roblox.com domains, not available to developers.',
		['HttpService'] 						= 'Allows developers to send and receive HTTP requests from external servers, enabling external data integration.',
		['IncrementalPatchBuilder'] 			= 'Likely an internal service related to building incremental patches for game updates.',
		['InsertService'] 						= 'Enables developers to load assets from Roblox (models, assets) into their experiences at runtime.',
		['InternalSyncService'] 				= 'An internal service, likely for synchronization purposes within the Roblox engine.',
		['JointsService'] 						= 'Likely an internal service related to the management and creation of joints between parts.',
		['KeyboardService'] 					= 'Likely an internal service for managing keyboard input.',
		['KeyframeSequenceProvider'] 			= 'Manages the registration and retrieval of KeyframeSequences, primarily for localized testing of animations in Studio.',
		['Lighting'] 							= 'Controls the lighting and environmental effects within a Roblox experience, including global illumination, shadows, and sky.',
		['LocalizationService'] 				= 'Provides information about the user\'s system locale and facilitates localization of in-experience content.',
		['LogService'] 							= 'Provides access to the client\'s output log history and events for debugging and monitoring.',
		['LuaWebService'] 						= 'Likely an older or internal service related to Lua-based web services.',
		['MarketplaceService'] 					= 'Facilitates in-experience purchases of developer products and game passes, and provides information about items.',
		['MaterialService'] 					= 'Likely an internal service related to managing materials and textures.',
		['MemoryStoreService'] 					= 'Provides fast, ephemeral data storage for rapidly changing data, suitable for leaderboards or real-time game states.',
		['MemStorageService'] 					= 'Likely an internal service related to memory storage.',
		['MeshContentProvider'] 				= 'Likely a content provider specifically for mesh assets.',
		['MessagingService'] 					= 'Enables cross-server communication within an experience, allowing messages to be published and subscribed to across different game instances.',
		['MouseService'] 						= 'Provides access to mouse input, including position, clicks, and movement events.',
		['NetworkClient'] 						= 'Likely an internal service handling client-side network communication.',
		['NotificationService'] 				= 'Allows developers to send in-experience notifications to players, subject to certain criteria and moderation.',
		['OpenCloudService'] 					= 'Provides access to Roblox resources through standard REST APIs, enabling external tools and web apps to interact with experiences.',
		['PackageService'] 						= 'Manages packages, which are reusable models or assets that can be easily updated across multiple places and experiences.',
		['PatchBundlerFileWatch'] 				= 'Likely an internal service related to monitoring files for patch bundling.',
		['PathfindingService'] 					= 'Calculates paths for NPCs or other entities to navigate around obstacles in the game world.',
		['PermissionsService'] 					= 'Likely an internal service for managing permissions within Studio or experiences.',
		['PhysicsService'] 						= 'Provides control over physics interactions, including collision groups and custom physics properties.',
		['PlacesService'] 						= 'Likely an internal service related to the management and loading of places within an experience.',
		['Players'] 							= 'Represents all players currently in an experience and provides access to individual Player objects, managing player lifecycles.',
		['PlayerViewService'] 					= 'Likely an internal service related to player camera views or rendering.',
		['PluginDebugService'] 					= 'Likely an internal service for debugging Roblox Studio plugins.',
		['PluginGuiService'] 					= 'Manages GUI elements created by Roblox Studio plugins.',
		['PluginManagementService'] 			= 'Likely an internal service for managing Roblox Studio plugins.',
		['PointsService'] 						= 'Likely an internal service for managing points or scoring systems.',
		['PolicyService'] 						= 'Provides information and enforcement mechanisms related to Roblox\'s community standards and policies.',
		['ProcessInstancePhysicsService'] 		= 'Likely an internal service related to processing physics for instances.',
		['ProximityPromptService'] 				= 'Manages ProximityPrompt objects, which encourage user interaction with in-experience objects when players are nearby.',
		['PublishService'] 						= 'Likely an internal service related to publishing experiences and assets.',
		['ReflectionService'] 					= 'Likely an internal service related to reflection (inspecting objects and their properties at runtime).',
		['RemoteDebuggerServer'] 				= 'Likely an internal server-side component for remote debugging.',
		['ReplicatedFirst'] 					= 'A container service whose contents are replicated to clients first, often used for custom loading screens or critical client scripts.',
		['ReplicatedStorage'] 					= 'A container service for objects that need to be accessible by both the client and the server, such as RemoteEvents, RemoteFunctions, and assets.',
		['RunService'] 							= 'Provides events that fire every frame, allowing developers to run code synchronously with the game loop (e.g., for animations or physics).',
		['ScriptContext'] 						= 'Likely an internal service related to the execution context of scripts.',
		['ScriptEditorService'] 				= 'Likely an internal service for managing the script editor in Roblox Studio.',
		['ScriptProfilerService'] 				= 'Likely an internal service for profiling script performance.',
		['Selection'] 							= 'Represents the currently selected objects in Roblox Studio, allowing plugins to interact with user selections.',
		['ServerScriptService'] 				= 'A container service for server-side scripts that are not replicated to clients, ensuring their code remains private to the server.',
		['ServerStorage'] 						= 'A container service for objects that are only accessible by the server and are not replicated to clients, often used for server-only assets.',
		['SharedTableRegistry'] 				= 'Likely an internal service for managing shared data tables.',
		['SolidModelContentProvider'] 			= 'Likely a content provider specifically for solid model (CSG) assets.',
		['SoundService'] 						= 'Manages sound playback and properties within an experience, including global sound settings and audio instances.',
		['StarterGui'] 							= 'A container service that holds ScreenGuis, BillboardGuis, and SurfaceGuis that are copied to a player\'s PlayerGui when they join.',
		['StarterPack'] 						= 'A container service for tools that are copied to a player\'s Backpack when they spawn.',
		['StarterPlayer'] 						= 'A container service that holds objects (like scripts and character models) that are copied to a player\'s Player object when they join.',
		['Stats'] 								= 'Provides access to various performance statistics and metrics of the Roblox engine.',
		['StudioService'] 						= 'Provides methods and properties specific to the Roblox Studio environment, allowing plugins to interact with Studio functionalities.',
		['Teams'] 								= 'A service that allows developers to define and manage teams within an experience, often used for game mechanics.',
		['TeleportService'] 					= 'Enables players to teleport between different places within an experience or to other experiences on Roblox.',
		['TestService'] 						= 'Provides utilities for automating tests within Roblox Studio, including running tests and reporting results.',
		['TextChatService'] 					= 'Manages the in-experience text chat system, allowing customization of chat channels and messages.',
		['TextBoxService'] 						= 'Likely an internal service for managing text box input.',
		['TextService'] 						= 'Provides functionality for text rendering, filtering, and measurement.',
		['TimerService'] 						= 'Likely an internal service for managing timers.',
		['TouchInputService'] 					= 'Handles touch input on devices with touchscreens, allowing developers to process touch events.',
		['TweenService'] 						= 'Enables the smooth, interpolated animation of object properties over time.',
		['UGCValidationService'] 				= 'Likely an internal service for validating User Generated Content (UGC).',
		['UIDragDetectorService'] 				= 'Likely an internal service for detecting UI drag interactions.',
		['UserInputService'] 					= 'Provides a comprehensive interface for handling all forms of user input, including keyboard, mouse, gamepad, and touch.',
		['UserService'] 						= 'Provides methods for retrieving information about Roblox users, such as their username and avatar.',
		['VersionControlService'] 				= 'Likely an internal service for managing version control within Studio.',
		['VideoCaptureService'] 				= 'Likely an internal service for capturing video within Roblox.',
		['VideoService'] 						= 'Likely an internal service for managing video playback.',
		['VirtualInputManager'] 				= 'Likely an internal service for managing virtual input devices.',
		['Visit'] 								= 'Likely an internal service related to tracking user visits to experiences.',
		['VisualizationModeService'] 			= 'Likely an internal service for managing visualization modes in Studio.',
		['VoiceChatService'] 					= 'Manages in-experience voice chat functionality.',
		['VRService'] 							= 'Provides an interface for interacting with Virtual Reality (VR) devices and experiences.',
		['Workspace']							= 'Holds all the 3D parts and objects players see in the game.'
	};

}
